{"componentChunkName":"component---src-templates-blog-post-js","path":"/converting-tables/","result":{"data":{"site":{"siteMetadata":{"title":"Mikey O'Brien"}},"markdownRemark":{"id":"103362e5-f929-50b5-aa36-f75dd9cfb613","excerpt":"+++\ntitle = \"Markdown Table <-> CSV\"\nauthor = [\"Mikey O'Brien\"]\ndate = \"2023-08-22\"\ntags = [\"TIL\"]\ncategories = [\"scripting\"]\ndraft = false\n+++ Yesterday, Iâ€¦","html":"<p>+++\ntitle = \"Markdown Table &#x3C;-> CSV\"\nauthor = [\"Mikey O'Brien\"]\ndate = \"2023-08-22\"\ntags = [\"TIL\"]\ncategories = [\"scripting\"]\ndraft = false\n+++</p>\n<p>Yesterday, I found myself needing to convert between a markdown and CSV table\nand vice versa. A quick Google search didn't turn up anything capable of doing\nso. Tools either converted one way or were online only (offline was a hard\nrequirement). I'm sure with enough digging, I could have found something, but I\njust needed something quickly that worked.</p>\n<p>A few GPT-4 prompts later, and I had a quick working solution.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python3</span>\n\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> re\n<span class=\"token keyword\">import</span> csv\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">markdown_to_csv</span><span class=\"token punctuation\">(</span>markdown_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    lines <span class=\"token operator\">=</span> markdown_table<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">set</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">del</span> lines<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n    lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">' +'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'|'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">]</span>\n    lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>cell<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> cell <span class=\"token keyword\">in</span> line <span class=\"token keyword\">if</span> cell<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">]</span>\n    lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'\"{}\"'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token string\">','</span> <span class=\"token keyword\">in</span> cell <span class=\"token keyword\">else</span> cell <span class=\"token keyword\">for</span> cell <span class=\"token keyword\">in</span> line<span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">]</span>\n    csv_table <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">','</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> csv_table\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">csv_to_markdown</span><span class=\"token punctuation\">(</span>csv_table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    reader <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span>csv_table<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>line <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> reader<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># Find the maximum width for each column</span>\n    col_widths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">max</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> cell <span class=\"token keyword\">in</span> col<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> col <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>lines<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># Apply padding to each cell to match the column width</span>\n    lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>cell<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token keyword\">for</span> cell<span class=\"token punctuation\">,</span> width <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">,</span> col_widths<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># Add a separator line</span>\n    separator <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'-'</span> <span class=\"token operator\">*</span> width <span class=\"token keyword\">for</span> width <span class=\"token keyword\">in</span> col_widths<span class=\"token punctuation\">]</span>\n    lines<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> separator<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Convert to markdown table</span>\n    markdown_table <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'|'</span> <span class=\"token operator\">+</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'|'</span> <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> lines<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> markdown_table\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    input_data <span class=\"token operator\">=</span> sys<span class=\"token punctuation\">.</span>stdin<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># Detect if the input is CSV or markdown based on the presence of the pipe character</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'|'</span> <span class=\"token keyword\">in</span> input_data<span class=\"token punctuation\">:</span>\n        output_data <span class=\"token operator\">=</span> markdown_to_csv<span class=\"token punctuation\">(</span>input_data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        output_data <span class=\"token operator\">=</span> csv_to_markdown<span class=\"token punctuation\">(</span>input_data<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>output_data<span class=\"token punctuation\">)</span></code></pre></div>\n<p><a href=\"https://gist.github.com/mikeyobrien/e77f53f28a885e3d0c202331cb60dfca\">https://gist.github.com/mikeyobrien/e77f53f28a885e3d0c202331cb60dfca</a></p>\n<p>Using the tool is simple,</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\"><span class=\"token comment\"># Make executable</span>\n<span class=\"token function\">chmod</span> +x table_format_converter.py\n\n<span class=\"token comment\"># Replace the table in your clipboard with converted table.</span>\n<span class=\"token comment\"># The script will automatically detect and convert accordingly.</span>\npbpaste <span class=\"token operator\">|</span> ./table_format_converter.py <span class=\"token operator\">|</span> pbcopy</code></pre></div>","frontmatter":{"title":"","date":null,"description":null}},"previous":null,"next":{"fields":{"slug":"/to-shave-less-yaks/"},"frontmatter":{"title":""}}},"pageContext":{"id":"103362e5-f929-50b5-aa36-f75dd9cfb613","previousPostId":null,"nextPostId":"23f8efa7-a56b-5226-965d-c714816592dc"}},"staticQueryHashes":["2841359383","3257411868"],"slicesMap":{}}